{
  "language": "Solidity",
  "sources": {
    "contracts/libraries/UnipoolLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\r\npragma solidity >=0.8.0;\r\n\r\ninterface Unipool {\r\n    function getReserves() external view returns (\r\n        uint112 baseReserves, \r\n        uint112 quoteReserves, \r\n        uint32 lastUpdate\r\n    );\r\n}\r\n\r\nlibrary UnipoolLibrary {\r\n\r\n    uint256 internal constant BIPS_DIVISOR = 10_000;\r\n\r\n    function uDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {assembly {z := div(x, y)}}\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(\r\n        address tokenA, \r\n        address tokenB\r\n    ) internal pure returns (address token0, address token1) {\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n    }\r\n\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt,\r\n        address deployer\r\n    ) internal pure returns (address predicted) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    error NONEXISTENT_PAIR();\r\n\r\n    // calculates the clone address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address implementation,\r\n        address tokenA, \r\n        address tokenB \r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = predictDeterministicAddress(implementation, keccak256(abi.encodePacked(token0, token1)), factory);\r\n        if (pair == address(0)) revert NONEXISTENT_PAIR();\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address implementation,\r\n        address tokenA, \r\n        address tokenB\r\n    ) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint baseReserves, uint quoteReserves,) = Unipool(pairFor(factory, implementation, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (baseReserves, quoteReserves) : (quoteReserves, baseReserves);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint amountA, \r\n        uint reserveA, \r\n        uint reserveB\r\n    ) internal pure returns (uint amountB) {\r\n        amountB = uDiv(amountA * reserveB, reserveA);\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint amountIn, \r\n        uint reserveIn, \r\n        uint reserveOut\r\n    ) internal pure returns (uint amountOut) {\r\n        uint amountInWithFee = amountIn * 9975;\r\n        amountOut = uDiv(amountInWithFee * reserveOut, reserveIn * BIPS_DIVISOR + amountInWithFee);\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint amountOut, \r\n        uint reserveIn, \r\n        uint reserveOut\r\n    ) internal pure returns (uint amountIn) {\r\n        amountIn = uDiv(reserveIn * amountOut * BIPS_DIVISOR, reserveOut - amountOut * 9975) + 1;\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                        SHOULD PROB BE UNCHECKED VVV                        */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        address implementation,\r\n        uint amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint[] memory amounts) {\r\n        unchecked {\r\n            uint256 pathLength = path.length; // save gas\r\n            \r\n            amounts = new uint[](pathLength);\r\n            amounts[0] = amountIn;\r\n            \r\n            for (uint i; i < pathLength - 1; ++i) {\r\n                (uint reserveIn, uint reserveOut) = getReserves(factory, implementation, path[i], path[i + 1]);\r\n                amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n            }\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        address implementation,\r\n        uint amountOut, \r\n        address[] memory path\r\n    ) internal view returns (uint[] memory amounts) {\r\n        unchecked {\r\n            uint256 pathLength = path.length; // save gas\r\n\r\n            amounts = new uint[](pathLength);\r\n            amounts[pathLength - 1] = amountOut;\r\n            \r\n            for (uint i = pathLength - 1; i > 0; --i) {\r\n                (uint reserveIn, uint reserveOut) = getReserves(factory, implementation, path[i - 1], path[i]);\r\n                amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/UnipoolRouter.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IERC20.sol\";\r\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\r\n\r\nimport \"./libraries/UnipoolLibrary.sol\";\r\n\r\ninterface IERC20PermitAllowed {\r\n    function permit(\r\n        address holder,\r\n        address spender,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        bool allowed,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\ncontract UnipoolRouter {\r\n\r\n    address public immutable factory;\r\n    address public immutable implementation;\r\n    address public immutable WETH;\r\n\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, \"EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _factory, \r\n        address _implementation, \r\n        address _WETH\r\n    ) {\r\n        factory = _factory;\r\n        implementation = _implementation;\r\n        WETH = _WETH;\r\n    }\r\n\r\n    receive() external payable {\r\n        // only accept ETH via fallback from the WETH contract\r\n        assert(msg.sender == WETH); \r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                             ADD LIQUIDITY LOGIC                            */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    function _addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin\r\n    ) internal virtual returns (uint amountA, uint amountB) {\r\n        // 1) store factory in memory to avoid a few SLOADS\r\n        address _factory = factory;\r\n        // 2) create the pair if it doesn\"t exist yet\r\n        if (IUniswapV2Factory(_factory).getPair(tokenA, tokenB) == address(0)) IUniswapV2Factory(_factory).createPair(tokenA, tokenB);\r\n        // 3) fetch reserves and store in memory to avoid a few SLOADS\r\n        (uint reserveA, uint reserveB) = UnipoolLibrary.getReserves(_factory, implementation, tokenA, tokenB);\r\n        \r\n        if (reserveA + reserveB == 0) (amountA, amountB) = (amountADesired, amountBDesired);\r\n        else {\r\n            uint amountBOptimal = UnipoolLibrary.quote(amountADesired, reserveA, reserveB);\r\n            if (amountBOptimal <= amountBDesired) {\r\n                require(amountBOptimal >= amountBMin, \"INSUFFICIENT_B_AMOUNT\");\r\n                (amountA, amountB) = (amountADesired, amountBOptimal);\r\n            } else {\r\n                uint amountAOptimal = UnipoolLibrary.quote(amountBDesired, reserveB, reserveA);\r\n                assert(amountAOptimal <= amountADesired);\r\n                require(amountAOptimal >= amountAMin, \"INSUFFICIENT_A_AMOUNT\");\r\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) { \r\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\r\n        address pair = UnipoolLibrary.pairFor(factory, implementation, tokenA, tokenB);\r\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\r\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\r\n        liquidity = IUniswapV2Pair(pair).mint(to);\r\n    }\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\r\n        (amountToken, amountETH) = _addLiquidity(token, WETH, amountTokenDesired, msg.value, amountTokenMin, amountETHMin);\r\n        address pair = UnipoolLibrary.pairFor(factory, implementation, token, WETH);\r\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\r\n        IWETH(WETH).deposit{value: amountETH}();\r\n        assert(IWETH(WETH).transfer(pair, amountETH));\r\n        liquidity = IUniswapV2Pair(pair).mint(to);\r\n        // refund dust eth, if any\r\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY ****\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) public ensure(deadline) returns (uint amountA, uint amountB) {\r\n        address pair = UnipoolLibrary.pairFor(factory, implementation, tokenA, tokenB);\r\n        IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\r\n        (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\r\n        (address token0,) = UnipoolLibrary.sortTokens(tokenA, tokenB);\r\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\r\n        require(amountA >= amountAMin, \"INSUFFICIENT_A_AMOUNT\");\r\n        require(amountB >= amountBMin, \"INSUFFICIENT_B_AMOUNT\");\r\n    }\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) public ensure(deadline) returns (uint amountToken, uint amountETH) {\r\n        (amountToken, amountETH) = removeLiquidity(token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline);\r\n        TransferHelper.safeTransfer(token, to, amountToken);\r\n        IWETH(WETH).withdraw(amountETH);\r\n        TransferHelper.safeTransferETH(to, amountETH);\r\n    }\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB) {\r\n        IUniswapV2Pair(UnipoolLibrary.pairFor(factory, implementation, tokenA, tokenB)).permit(\r\n            msg.sender, \r\n            address(this), \r\n            approveMax ? type(uint).max : liquidity, \r\n            deadline, \r\n            v, \r\n            r, \r\n            s\r\n        );\r\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\r\n    }\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH) {\r\n        address pair = UnipoolLibrary.pairFor(factory, implementation, token, WETH);\r\n        uint value = approveMax ? type(uint).max : liquidity;\r\n        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) public ensure(deadline) returns (uint amountETH) {\r\n        (, amountETH) = removeLiquidity(token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline);\r\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\r\n        IWETH(WETH).withdraw(amountETH);\r\n        TransferHelper.safeTransferETH(to, amountETH);\r\n    }\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH) {\r\n        address pair = UnipoolLibrary.pairFor(factory, implementation, token, WETH);\r\n        uint value = approveMax ? type(uint).max : liquidity;\r\n        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                 SWAP LOGIC                                 */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swap(\r\n        uint[] memory amounts, \r\n        address[] memory path, \r\n        address _to\r\n    ) internal virtual {\r\n        // unchecked orginally \r\n        unchecked {\r\n            uint256 pathLength = path.length;\r\n            address _implementation = implementation;\r\n            for (uint i; i < pathLength - 1; ++i) {\r\n                (address input, address output) = (path[i], path[i + 1]);\r\n                (address token0,) = UnipoolLibrary.sortTokens(input, output);\r\n                uint amountOut = amounts[i + 1];\r\n                (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\r\n                address to = i < path.length - 2 ? UnipoolLibrary.pairFor(factory, _implementation, output, path[i + 2]) : _to;\r\n                IUniswapV2Pair(UnipoolLibrary.pairFor(factory, _implementation, input, output)).swap(\r\n                    amount0Out, \r\n                    amount1Out, \r\n                    to, \r\n                    new bytes(0)\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) public ensure(deadline) returns (uint[] memory amounts) {\r\n        unchecked {\r\n            address _implementation = implementation;\r\n            amounts = UnipoolLibrary.getAmountsOut(factory, _implementation, amountIn, path);\r\n            require(amounts[amounts.length - 1] >= amountOutMin, \"INSUFFICIENT_OUTPUT_AMOUNT\");\r\n            TransferHelper.safeTransferFrom(\r\n                path[0], \r\n                msg.sender, \r\n                UnipoolLibrary.pairFor(factory, _implementation, path[0], path[1]), amounts[0]\r\n            );\r\n            _swap(amounts, path, to);\r\n        }\r\n    }\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) public ensure(deadline) returns (uint[] memory amounts) {\r\n        address _implementation = implementation;\r\n        amounts = UnipoolLibrary.getAmountsIn(factory, implementation, amountOut, path);\r\n        require(amounts[0] <= amountInMax, \"EXCESSIVE_INPUT_AMOUNT\");\r\n        TransferHelper.safeTransferFrom(\r\n            path[0], \r\n            msg.sender, \r\n            UnipoolLibrary.pairFor(factory, _implementation, path[0], path[1]), \r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n    ) external payable ensure(deadline) returns (uint[] memory amounts) {\r\n        require(path[0] == WETH, \"INVALID_PATH\");\r\n        address _implementation = implementation;\r\n        amounts = UnipoolLibrary.getAmountsOut(factory, _implementation, msg.value, path);\r\n        require(amounts[amounts.length - 1] >= amountOutMin, \"INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        IWETH(WETH).deposit{value: amounts[0]}();\r\n        assert(IWETH(WETH).transfer(UnipoolLibrary.pairFor(factory, _implementation, path[0], path[1]), amounts[0]));\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapTokensForExactETH(    \r\n        uint amountOut, \r\n        uint amountInMax, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n    ) public ensure(deadline) returns (uint[] memory amounts) {\r\n        // Store the strings w\r\n        require(path[path.length - 1] == WETH, \"INVALID_PATH\");\r\n        address _implementation = implementation;\r\n        amounts = UnipoolLibrary.getAmountsIn(factory, _implementation, amountOut, path);\r\n        //amountInMax > amounts[0] ] golfin?\r\n        require(amounts[0] <= amountInMax, \"EXCESSIVE_INPUT_AMOUNT\");\r\n        TransferHelper.safeTransferFrom(path[0], msg.sender, UnipoolLibrary.pairFor(\r\n            factory, \r\n            _implementation, \r\n            path[0], \r\n            path[1]), \r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\r\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\r\n    }\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn, \r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n    ) public ensure(deadline) returns (uint[] memory amounts) {\r\n        require(path[path.length - 1] == WETH, \"INVALID_PATH\");\r\n        address _implementation = implementation;\r\n        amounts = UnipoolLibrary.getAmountsOut(factory, _implementation, amountIn, path);\r\n        //amountOutMin > amounts[amounts.length - 1 ] golfin?\r\n        require(amounts[amounts.length - 1] >= amountOutMin, \"INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        TransferHelper.safeTransferFrom(\r\n            path[0], \r\n            msg.sender, \r\n            UnipoolLibrary.pairFor(factory, _implementation, path[0], path[1]), \r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\r\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\r\n    }\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n    ) external payable ensure(deadline) returns (uint[] memory amounts) {\r\n        require(path[0] == WETH, \"INVALID_PATH\");\r\n        address _implementation = implementation;\r\n        amounts = UnipoolLibrary.getAmountsIn(factory, _implementation, amountOut, path);\r\n        require(amounts[0] <= msg.value, \"EXCESSIVE_INPUT_AMOUNT\");\r\n        IWETH(WETH).deposit{value: amounts[0]}();\r\n        assert(IWETH(WETH).transfer(UnipoolLibrary.pairFor(factory, _implementation, path[0], path[1]), amounts[0]));\r\n        _swap(amounts, path, to);\r\n        // refund dust eth, if any\r\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                              PERMIT SWAP LOGIC                             */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    function swapExactTokensForTokensUsingPermit(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline, uint8 v, bytes32 r, bytes32 s\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        IERC20Permit(path[0]).permit(msg.sender, address(this), amountIn, deadline, v, r, s);\r\n        amounts = swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\r\n    }\r\n\r\n    function swapExactTokensForTokensUsingPermitAllowed(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline, uint256 nonce, uint8 v, bytes32 r, bytes32 s\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        IERC20PermitAllowed(path[0]).permit(msg.sender, address(this), nonce, deadline, true, v, r, s);\r\n        amounts = swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\r\n    }\r\n\r\n    function swapTokensForExactTokensUsingPermit(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline, uint8 v, bytes32 r, bytes32 s\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        IERC20Permit(path[0]).permit(msg.sender, address(this), amountInMax, deadline, v, r, s);\r\n        amounts = swapTokensForExactTokens(amountOut, amountInMax, path, to, deadline);\r\n    }\r\n\r\n    function swapTokensForExactTokensUsingPermitAllowed(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline, uint256 nonce, uint8 v, bytes32 r, bytes32 s\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        IERC20PermitAllowed(path[0]).permit(msg.sender, address(this), nonce, deadline, true, v, r, s);\r\n        amounts = swapTokensForExactTokens(amountOut, amountInMax, path, to, deadline);\r\n    }\r\n\r\n    function swapTokensForExactETHUsingPermit(    \r\n        uint amountOut, \r\n        uint amountInMax, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline, uint8 v, bytes32 r, bytes32 s\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        IERC20Permit(path[0]).permit(msg.sender, address(this), amountInMax, deadline, v, r, s);\r\n        amounts = swapTokensForExactETH(amountOut, amountInMax, path, to, deadline);\r\n    }\r\n\r\n    function swapTokensForExactETHUsingPermitAllowed(    \r\n        uint amountOut, \r\n        uint amountInMax, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline, uint256 nonce, uint8 v, bytes32 r, bytes32 s\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        IERC20PermitAllowed(path[0]).permit(msg.sender, address(this), nonce, deadline, true, v, r, s);\r\n        amounts = swapTokensForExactETH(amountOut, amountInMax, path, to, deadline);\r\n    }\r\n\r\n    function swapExactTokensForETHUsingPermit(\r\n        uint amountIn, \r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline, uint8 v, bytes32 r, bytes32 s\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        IERC20Permit(path[0]).permit(msg.sender, address(this), amountIn, deadline, v, r, s);\r\n        amounts = swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline);\r\n    }\r\n\r\n    function swapExactTokensForETHUsingPermitAllowed(\r\n        uint amountIn, \r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline, uint256 nonce, uint8 v, bytes32 r, bytes32 s\r\n    ) external ensure(deadline) returns (uint[] memory amounts) {\r\n        IERC20PermitAllowed(path[0]).permit(msg.sender, address(this), nonce, deadline, true, v, r, s);\r\n        amounts = swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline);\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*               SWAP (supporting fee-on-transfer tokens) LOGIC               */\r\n    /* -------------------------------------------------------------------------- */\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swapSupportingFeeOnTransferTokens(\r\n        address[] memory path, \r\n        address _to\r\n    ) internal virtual {\r\n        address _implementation = implementation;\r\n        // uint256 pathLength = path.length;\r\n\r\n        for (uint i; i < path.length - 1; ++i) {\r\n            \r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0,) = UnipoolLibrary.sortTokens(input, output);\r\n            IUniswapV2Pair pair = IUniswapV2Pair(UnipoolLibrary.pairFor(factory, _implementation, input, output));\r\n\r\n            uint amountOutput;\r\n            \r\n            { // scope to avoid stack too deep errors\r\n                (uint reserve0, uint reserve1,) = pair.getReserves();\r\n                (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n                amountOutput = UnipoolLibrary.getAmountOut(\r\n                    IERC20(input).balanceOf(address(pair)) - reserveInput, \r\n                    reserveInput, \r\n                    reserveOutput\r\n                );\r\n            }\r\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\r\n            address to = i < path.length - 2 ? UnipoolLibrary.pairFor(factory, _implementation, output, path[i + 2]) : _to;\r\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) {\r\n        TransferHelper.safeTransferFrom(path[0], msg.sender, UnipoolLibrary.pairFor(factory, implementation,path[0], path[1]), amountIn);\r\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\r\n        _swapSupportingFeeOnTransferTokens(path, to);\r\n        require(IERC20(path[path.length - 1]).balanceOf(to) - (balanceBefore) >= amountOutMin, \"INSUFFICIENT_OUTPUT_AMOUNT\");\r\n    }\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable ensure(deadline) {\r\n        require(path[0] == WETH, \"INVALID_PATH\");\r\n        uint amountIn = msg.value;\r\n        IWETH(WETH).deposit{value: amountIn}();\r\n        assert(IWETH(WETH).transfer(UnipoolLibrary.pairFor(factory, implementation, path[0], path[1]), amountIn));\r\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\r\n        _swapSupportingFeeOnTransferTokens(path, to);\r\n        require(IERC20(path[path.length - 1]).balanceOf(to) - (balanceBefore) >= amountOutMin, \"INSUFFICIENT_OUTPUT_AMOUNT\");\r\n    }\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ensure(deadline) {\r\n        require(path[path.length - 1] == WETH, \"INVALID_PATH\");\r\n        TransferHelper.safeTransferFrom(path[0], msg.sender, UnipoolLibrary.pairFor(factory, implementation, path[0], path[1]), amountIn);\r\n        _swapSupportingFeeOnTransferTokens(path, address(this));\r\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\r\n        require(amountOut >= amountOutMin, \"INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        IWETH(WETH).withdraw(amountOut);\r\n        TransferHelper.safeTransferETH(to, amountOut);\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                              LIBRARY FUNCTIONS                             */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure returns (uint amountB) {\r\n        return UnipoolLibrary.quote(amountA, reserveA, reserveB);\r\n    }\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure returns (uint amountOut) {\r\n        return UnipoolLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\r\n    }\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure returns (uint amountIn) {\r\n        return UnipoolLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\r\n    }\r\n\r\n    function getAmountsOut(uint amountIn, address[] memory path) public view returns (uint[] memory amounts) {\r\n        return UnipoolLibrary.getAmountsOut(factory, implementation, amountIn, path);\r\n    }\r\n\r\n    function getAmountsIn(uint amountOut, address[] memory path) public view returns (uint[] memory amounts) {\r\n        return UnipoolLibrary.getAmountsIn(factory, implementation, amountOut, path);\r\n    }\r\n}"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "pragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/Unipool.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\r\npragma solidity >=0.8.0;\r\n\r\n// ██    ██ ███    ██ ██ ██████   ██████   ██████  ██      \r\n// ██    ██ ████   ██ ██ ██   ██ ██    ██ ██    ██ ██      \r\n// ██    ██ ██ ██  ██ ██ ██████  ██    ██ ██    ██ ██      \r\n// ██    ██ ██  ██ ██ ██ ██      ██    ██ ██    ██ ██      \r\n//  ██████  ██   ████ ██ ██       ██████   ██████  ███████\r\n\r\nimport {ERC20}                      from \"@rari-capital/solmate/src/tokens/ERC20.sol\";\r\nimport {FixedPointMathLib}          from \"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\";\r\nimport {TransferHelper}             from \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\r\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\n\r\ncontract Unipool is ERC20(\"Unipool LP Token\", \"CLP\", 18), ReentrancyGuardUpgradeable {\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                   EVENTS                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    event Mint(address indexed sender, uint256 baseAmount, uint256 quoteAmount);\r\n    event Burn(address indexed sender, uint256 baseAmount, uint256 quoteAmount, address indexed to);\r\n    \r\n    event Swap(\r\n        address indexed sender, \r\n        uint256 baseAmountIn, \r\n        uint256 quoteAmountIn, \r\n        uint256 baseAmountOut, \r\n        uint256 quoteAmountOut, \r\n        address indexed to\r\n    );\r\n     \r\n    event Sync(uint112 baseReserves, uint112 quoteReserves);\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                  CONSTANTS                                 */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    // To avoid division by zero, there is a minimum number of liquidity tokens that always \r\n    // exist (but are owned by account zero). That number is BIPS_DIVISOR, ten thousand.\r\n    uint256 internal constant PRECISION = 112;\r\n    uint256 internal constant BIPS_DIVISOR = 10_000;\r\n    \r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                MUTABLE STATE                               */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    address public factory;\r\n    address public base;\r\n    address public quote;\r\n\r\n    uint256 public swapFee;\r\n    uint256 public basePriceCumulativeLast;\r\n    uint256 public quotePriceCumulativeLast;\r\n    \r\n    uint112 private baseReserves;   \r\n    uint112 private quoteReserves;\r\n    uint32  private lastUpdate;\r\n\r\n    function getReserves() public view returns (uint112 _baseReserves, uint112 _quoteReserves, uint32 _lastUpdate) {\r\n        (_baseReserves, _quoteReserves, _lastUpdate) = (baseReserves, quoteReserves, lastUpdate);\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                               INITIALIZATION                               */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    error INITIALIZED();\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(\r\n        address _base, \r\n        address _quote, \r\n        uint256 _swapFee\r\n    ) external initializer {\r\n        if (swapFee > 0) revert INITIALIZED();\r\n        (base, quote, swapFee) = (_base, _quote, _swapFee);\r\n        _mint(address(0), BIPS_DIVISOR); \r\n\r\n        __ReentrancyGuard_init();\r\n    }\r\n\r\n    error BALANCE_OVERFLOW();\r\n\r\n    /// @notice update reserves and, on the first call per block, price accumulators\r\n    function _update(\r\n        uint256 baseBalance, \r\n        uint256 quoteBalance, \r\n        uint112 _baseReserves, \r\n        uint112 _quoteReserves\r\n    ) private {\r\n        unchecked {\r\n            // 1) revert if both balances are greater than 2**112\r\n            if (baseBalance > type(uint112).max || quoteBalance > type(uint112).max) revert BALANCE_OVERFLOW();\r\n            // 2) store current time in memory (mod 2**32 to prevent DoS in 20 years)\r\n            uint32 timestampAdjusted = uint32(block.timestamp % 2**32);\r\n            // 3) store elapsed time since last update\r\n            uint256 timeElapsed = timestampAdjusted - lastUpdate; \r\n            // 4) if oracle info hasn\"t been updated this block, and there's liquidity, update TWAP variables\r\n            if (timeElapsed > 0 && _baseReserves != 0 && _quoteReserves != 0) {\r\n                basePriceCumulativeLast += (uint(_quoteReserves) << PRECISION) / _baseReserves * timeElapsed;\r\n                quotePriceCumulativeLast += (uint(_baseReserves) << PRECISION) / _quoteReserves * timeElapsed;\r\n            }\r\n            // 5) sync reserves (make them match balances)\r\n            (baseReserves, quoteReserves, lastUpdate) = (uint112(baseBalance), uint112(quoteBalance), timestampAdjusted);\r\n            // 6) emit event since mutable storage was updated\r\n            emit Sync(baseReserves, quoteReserves);\r\n        }\r\n    }\r\n\r\n    error INSUFFICIENT_LIQUIDITY_MINTED();\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to) external nonReentrant returns (uint256 liquidity) {\r\n        // 1) store any variables used more than once in memory to avoid SLOAD\"s\r\n        (uint112 _baseReserves, uint112 _quoteReserves,) = getReserves();\r\n        uint256 baseBalance = ERC20(base).balanceOf(address(this));\r\n        uint256 quoteBalance = ERC20(quote).balanceOf(address(this));\r\n        uint256 baseAmount = baseBalance - (_baseReserves);\r\n        uint256 quoteAmount = quoteBalance - (_quoteReserves);\r\n        uint256 _totalSupply = totalSupply;\r\n        // 2) if lp token total supply is equal to BIPS_DIVISOR (1,000 wei), \r\n        // amountOut (liquidity) is equal to the root of k minus BIPS_DIVISOR  \r\n        if (_totalSupply == BIPS_DIVISOR) liquidity = FixedPointMathLib.sqrt(baseAmount * quoteAmount) - BIPS_DIVISOR; \r\n        else liquidity = min(uDiv(baseAmount * _totalSupply, _baseReserves), uDiv(quoteAmount * _totalSupply, _quoteReserves));\r\n        // 3) revert if Lp tokens out is equal to zero\r\n        if (liquidity == 0) revert INSUFFICIENT_LIQUIDITY_MINTED();\r\n        // 4) mint liquidity providers LP tokens        \r\n        _mint(to, liquidity);\r\n        // 5) update mutable storage (reserves + cumulative oracle prices)\r\n        _update(baseBalance, quoteBalance, _baseReserves, _quoteReserves);\r\n        // 6) emit event since mutable storage was updated  \r\n        emit Mint(msg.sender, baseAmount, quoteAmount);\r\n    }\r\n\r\n    error INSUFFICIENT_LIQUIDITY_BURNED();\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to) external nonReentrant returns (uint256 baseAmount, uint256 quoteAmount) {\r\n        // 1) store any variables used more than once in memory to avoid SLOAD\"s\r\n        (uint112 _baseReserves, uint112 _quoteReserves,) = getReserves();   \r\n        address _base = base;                                    \r\n        address _quote = quote;                                    \r\n        uint256 baseBalance = ERC20(_base).balanceOf(address(this));          \r\n        uint256 quoteBalance = ERC20(_quote).balanceOf(address(this));          \r\n        uint256 liquidity = balanceOf[address(this)];                 \r\n        uint256 _totalSupply = totalSupply;\r\n        // 2) division was originally unchecked, using balances ensures pro-rata distribution\r\n        baseAmount = uDiv(liquidity * baseBalance, _totalSupply); \r\n        quoteAmount = uDiv(liquidity * quoteBalance, _totalSupply);\r\n        // 3) revert if amountOuts are both equal to zero\r\n        if (baseAmount == 0 && quoteAmount == 0) revert INSUFFICIENT_LIQUIDITY_BURNED();\r\n        // 4) burn LP tokens from this contract\"s balance\r\n        _burn(address(this), liquidity);\r\n        // 5) return liquidity providers underlying tokens        \r\n        TransferHelper.safeTransfer(_base, to, baseAmount);\r\n        TransferHelper.safeTransfer(_quote, to, quoteAmount);\r\n        // 6) update mutable storage (reserves + cumulative oracle prices)        \r\n        _update(ERC20(_base).balanceOf(address(this)), ERC20(_quote).balanceOf(address(this)), _baseReserves, _quoteReserves);\r\n        // 7) emit event since mutable storage was updated     \r\n        emit Burn(msg.sender, baseAmount, quoteAmount, to);\r\n    }\r\n\r\n    error INSUFFICIENT_OUTPUT_AMOUNT();\r\n    error INSUFFICIENT_LIQUIDITY();\r\n    error INSUFFICIENT_INPUT_AMOUNT();\r\n    error INSUFFICIENT_INVARIANT();\r\n\r\n    /// @notice Optimistically swap tokens, will revert if K is not satisfied\r\n    /// @param baseAmountOut - amount of base tokens user wants to receive\r\n    /// @param quoteAmountOut - amount of quote tokens user wants to receive\r\n    /// @param to - recipient of 'output' tokens\r\n    /// @param data - arbitrary data used during flashswaps\r\n    function swap(\r\n        uint256 baseAmountOut, \r\n        uint256 quoteAmountOut, \r\n        address to, \r\n        bytes calldata data\r\n    ) external nonReentrant {\r\n        // 1) revert if both amounts out are zero\r\n        // 2) store reserves in memory to avoid SLOAD\"s\r\n        // 3) revert if both amounts out\r\n        // 4) store any other variables used more than once in memory to avoid SLOAD\"s\r\n        if (baseAmountOut + quoteAmountOut == 0) revert INSUFFICIENT_OUTPUT_AMOUNT();\r\n        (uint112 _baseReserves, uint112 _quoteReserves,) = getReserves();\r\n        if (baseAmountOut > _baseReserves || quoteAmountOut >=_quoteReserves) revert INSUFFICIENT_LIQUIDITY();\r\n        uint256 baseAmountIn;\r\n        uint256 quoteAmountIn;\r\n        uint256 baseBalance;\r\n        uint256 quoteBalance;\r\n        {\r\n        address _base = base;\r\n        address _quote = quote;\r\n        // 1) optimistically transfer \"to\" base tokens\r\n        // 2) optimistically transfer \"to\" quote tokens\r\n        // 3) if data length is greater than 0, initiate flashswap\r\n        // 4) store base token balance of contract in memory\r\n        // 5) store quote token balance of contract in memory\r\n        if (baseAmountOut > 0) TransferHelper.safeTransfer(_base, to, baseAmountOut); \r\n        if (quoteAmountOut > 0) TransferHelper.safeTransfer(_quote, to, quoteAmountOut);\r\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, baseAmountOut, quoteAmountOut, data);\r\n        baseBalance = ERC20(_base).balanceOf(address(this));\r\n        quoteBalance = ERC20(_quote).balanceOf(address(this));\r\n        } \r\n        \r\n        unchecked {\r\n            // 1) calculate baseAmountIn by comparing contracts balance to last known reserve\r\n            // 2) calculate quoteAmountIn by comparing contracts balance to last known reserve\r\n            // 3) revert if user hasn't sent any tokens to the contract \r\n            if (baseBalance > _baseReserves - baseAmountOut) baseAmountIn = baseBalance - (_baseReserves - baseAmountOut);\r\n            if (quoteBalance > _quoteReserves - quoteAmountOut) quoteAmountIn = quoteBalance - (_quoteReserves - quoteAmountOut);\r\n            if (baseAmountIn + quoteAmountIn == 0) revert INSUFFICIENT_INPUT_AMOUNT();\r\n        }\r\n\r\n        {\r\n        // 1) store swap fee in memory to save SLOAD\r\n        // 2) revert if current k adjusted for fees is less than old k\r\n        // 3) update mutable storage (reserves + cumulative oracle prices)\r\n        // 4) emit event since mutable storage was updated\r\n        uint256 _swapFee = swapFee; \r\n        uint256 baseBalanceAdjusted = baseBalance * BIPS_DIVISOR - baseAmountIn * _swapFee;\r\n        uint256 quoteBalanceAdjusted = quoteBalance * BIPS_DIVISOR - quoteAmountIn * _swapFee;\r\n        if (baseBalanceAdjusted * quoteBalanceAdjusted < uint(_baseReserves) * _quoteReserves * 1e8) revert INSUFFICIENT_INVARIANT();\r\n        }\r\n        _update(baseBalance, quoteBalance, _baseReserves, _quoteReserves);\r\n        emit Swap(msg.sender, baseAmountIn, quoteAmountIn, baseAmountOut, quoteAmountOut, to);\r\n    }\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external nonReentrant {\r\n        // store any variables used more than once in memory to avoid SLOAD\"s\r\n        address _base = base;\r\n        address _quote = quote;\r\n        // transfer unaccounted reserves -> \"to\"\r\n        TransferHelper.safeTransfer(_base, to, ERC20(_base).balanceOf(address(this)) - baseReserves);\r\n        TransferHelper.safeTransfer(_quote, to, ERC20(_quote).balanceOf(address(this)) - quoteReserves);\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external nonReentrant {\r\n        _update(\r\n            ERC20(base).balanceOf(address(this)), \r\n            ERC20(quote).balanceOf(address(this)), \r\n            baseReserves, \r\n            quoteReserves\r\n        );\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                              INTERNAL HELPERS                              */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    // unchecked division\r\n    function uDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {assembly {z := div(x, y)}}\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {z = x < y ? x : y;}\r\n}\r\n\r\n// naming left for old contract support\r\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n"
    },
    "@rari-capital/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*///////////////////////////////////////////////////////////////\n                             EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v, r, s);\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/utils/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\nlibrary FixedPointMathLib {\n    /*///////////////////////////////////////////////////////////////\n                            COMMON BASE UNITS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant YAD = 1e8;\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant RAD = 1e45;\n\n    /*///////////////////////////////////////////////////////////////\n                         FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function fmul(\n        uint256 x,\n        uint256 y,\n        uint256 baseUnit\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(x == 0 || (x * y) / x == y)\n            if iszero(or(iszero(x), eq(div(z, x), y))) {\n                revert(0, 0)\n            }\n\n            // If baseUnit is zero this will return zero instead of reverting.\n            z := div(z, baseUnit)\n        }\n    }\n\n    function fdiv(\n        uint256 x,\n        uint256 y,\n        uint256 baseUnit\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * baseUnit in z for now.\n            z := mul(x, baseUnit)\n\n            // Equivalent to require(y != 0 && (x == 0 || (x * baseUnit) / x == baseUnit))\n            if iszero(and(iszero(iszero(y)), or(iszero(x), eq(div(z, x), baseUnit)))) {\n                revert(0, 0)\n            }\n\n            // We ensure y is not zero above, so there is never division by zero here.\n            z := div(z, y)\n        }\n    }\n\n    function fpow(\n        uint256 x,\n        uint256 n,\n        uint256 baseUnit\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := baseUnit\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store baseUnit in z for now.\n                    z := baseUnit\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, baseUnit)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, baseUnit)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, baseUnit)\n                    }\n                }\n            }\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            // Start off with z at 1.\n            z := 1\n\n            // Used below to help find a nearby power of 2.\n            let y := x\n\n            // Find the lowest power of 2 that is at least sqrt(x).\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\n                y := shr(128, y) // Like dividing by 2 ** 128.\n                z := shl(64, z)\n            }\n            if iszero(lt(y, 0x10000000000000000)) {\n                y := shr(64, y) // Like dividing by 2 ** 64.\n                z := shl(32, z)\n            }\n            if iszero(lt(y, 0x100000000)) {\n                y := shr(32, y) // Like dividing by 2 ** 32.\n                z := shl(16, z)\n            }\n            if iszero(lt(y, 0x10000)) {\n                y := shr(16, y) // Like dividing by 2 ** 16.\n                z := shl(8, z)\n            }\n            if iszero(lt(y, 0x100)) {\n                y := shr(8, y) // Like dividing by 2 ** 8.\n                z := shl(4, z)\n            }\n            if iszero(lt(y, 0x10)) {\n                y := shr(4, y) // Like dividing by 2 ** 4.\n                z := shl(2, z)\n            }\n            if iszero(lt(y, 0x8)) {\n                // Equivalent to 2 ** z.\n                z := shl(1, z)\n            }\n\n            // Shifting right by 1 is like dividing by 2.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // Compute a rounded down version of z.\n            let zRoundDown := div(x, z)\n\n            // If zRoundDown is smaller, use it.\n            if lt(zRoundDown, z) {\n                z := zRoundDown\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/test/UnipoolRouter.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8;\r\n\r\nimport {ERC20}          from \"@rari-capital/solmate/src/tokens/ERC20.sol\";\r\nimport {Strings}        from \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\nimport {UnipoolFactory} from \"../UnipoolFactory.sol\";\r\nimport {UnipoolRouter}  from \"../UnipoolRouter.sol\";\r\nimport {Unipool}        from \"../Unipool.sol\";\r\nimport {DSTest}         from \"./utils/test.sol\";\r\n\r\ncontract MockERC20 is ERC20 {    \r\n    constructor(string memory name, string memory symbol) ERC20(name, symbol, 18) {}\r\n    function mint(address guy, uint256 wad) public {_mint(guy, wad);}\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function initialize(address, address, uint) external;\r\n    function implementation() external view returns (address);\r\n}\r\n\r\ncontract UnipoolRouterTest is DSTest {\r\n\r\n    UnipoolFactory factory;\r\n    UnipoolRouter router;\r\n    MockERC20 baseToken;\r\n    MockERC20 quoteToken;\r\n    Unipool pair;\r\n\r\n    function setUp() public {\r\n        // deploy factory and router\r\n        factory = new UnipoolFactory();\r\n        router = new UnipoolRouter(address(factory), factory.implementation(), address(factory));\r\n\r\n        // deploy some test tokens\r\n        baseToken = new MockERC20(\"Base Token\", \"BASE\");\r\n        quoteToken = new MockERC20(\"Quote Token\", \"QUOTE\");\r\n        \r\n        // create pool for test tokens\r\n        pair = Unipool(factory.createPair(address(baseToken), address(quoteToken))); \r\n        \r\n        // mint this address some test tokens\r\n        baseToken.mint(address(this), 1e27);    // 1,000,000,000 tokens\r\n        quoteToken.mint(address(this), 1e27);   // 1,000,000,000 tokens\r\n\r\n        // add liq to pool\r\n        addLiquidity(100e18, 1000e18);\r\n\r\n        // approve q toke\r\n        quoteToken.approve(address(router), type(uint256).max);\r\n    }\r\n\r\n    function addLiquidity(uint baseAmount, uint quoteAmount) internal {\r\n        baseToken.transfer(address(pair), baseAmount);\r\n        quoteToken.transfer(address(pair), quoteAmount);\r\n        pair.mint(address(this));\r\n    }\r\n\r\n    function removeLiquidity() internal {\r\n        //take portion to some address, will make burns more expensive\r\n        pair.burn(address(this));\r\n    }\r\n     \r\n    function testSwapExactTokensForTokens() public {\r\n\r\n        // quote token to cnv\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(quoteToken);\r\n        path[1] = address(baseToken);\r\n\r\n        // calc amountsOut for both tokens\r\n        uint256[] memory amountsOut = router.swapExactTokensForTokens(\r\n            1e18, \r\n            router.getAmountOut(1e18, 1000e18, 100e18), \r\n            path, \r\n            address(this), \r\n            block.timestamp\r\n        );\r\n        //extract token \r\n        uint256 amountOut = amountsOut[amountsOut.length - 1];\r\n        // confirm calc \r\n        require(amountOut == 99650598527968351, Strings.toString(amountOut));\r\n    }\r\n}\r\n\r\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/UnipoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./Unipool.sol\";\r\n\r\ncontract UnipoolFactory {\r\n\r\n    mapping(address => mapping(address => address)) private _getPair;\r\n    address[] public allPairs;\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    address public implementation = address(new Unipool());\r\n\r\n    error IDENTICAL_ADDRESSES();\r\n    error PAIR_ALREADY_EXISTS();\r\n    error ZERO_ADDRESS();\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\r\n        if (tokenA == tokenB) revert IDENTICAL_ADDRESSES();\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        if (token0 == address(0)) revert ZERO_ADDRESS();\r\n        if (_getPair[token0][token1] != address(0)) revert PAIR_ALREADY_EXISTS(); // single check is sufficient\r\n\r\n        pair = cloneDeterministic(implementation, keccak256(abi.encodePacked(token0, token1)));\r\n        Unipool(pair).initialize(token0, token1, 25);\r\n        \r\n        _getPair[token0][token1] = pair;\r\n        allPairs.push(pair);\r\n        emit PairCreated(token0, token1, pair, allPairs.length);\r\n    }\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address) {\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        return _getPair[token0][token1];\r\n    }\r\n    \r\n    function allPairsLength() external view returns (uint) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                CLONE LOGIC                                 */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    function cloneDeterministic(address impl, bytes32 salt) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, impl))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n}"
    },
    "contracts/test/utils/test.sol": {
      "content": "pragma solidity >=0.8.0;\r\n\r\ncontract DSTest {\r\n    event log                    (string);\r\n    event logs                   (bytes);\r\n\r\n    event log_address            (address);\r\n    event log_bytes32            (bytes32);\r\n    event log_int                (int);\r\n    event log_uint               (uint);\r\n    event log_bytes              (bytes);\r\n    event log_string             (string);\r\n\r\n    event log_named_address      (string key, address val);\r\n    event log_named_bytes32      (string key, bytes32 val);\r\n    event log_named_decimal_int  (string key, int val, uint decimals);\r\n    event log_named_decimal_uint (string key, uint val, uint decimals);\r\n    event log_named_int          (string key, int val);\r\n    event log_named_uint         (string key, uint val);\r\n    event log_named_bytes        (string key, bytes val);\r\n    event log_named_string       (string key, string val);\r\n\r\n    bool public IS_TEST = true;\r\n    bool public failed;\r\n\r\n    address constant HEVM_ADDRESS =\r\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\r\n\r\n    modifier mayRevert() { _; }\r\n    modifier testopts(string memory) { _; }\r\n\r\n    function fail() internal {\r\n        failed = true;\r\n    }\r\n\r\n    modifier logs_gas() {\r\n        uint startGas = gasleft();\r\n        _;\r\n        uint endGas = gasleft();\r\n        emit log_named_uint(\"gas\", startGas - endGas);\r\n    }\r\n\r\n    function assertTrue(bool condition) internal {\r\n        if (!condition) {\r\n            emit log(\"Error: Assertion Failed\");\r\n            fail();\r\n        }\r\n    }\r\n\r\n    function assertTrue(bool condition, string memory err) internal {\r\n        if (!condition) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertTrue(condition);\r\n        }\r\n    }\r\n\r\n    function assertEq(address a, address b) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [address]\");\r\n            emit log_named_address(\"  Expected\", b);\r\n            emit log_named_address(\"    Actual\", a);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq(address a, address b, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string (\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n\r\n    function assertEq(bytes32 a, bytes32 b) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [bytes32]\");\r\n            emit log_named_bytes32(\"  Expected\", b);\r\n            emit log_named_bytes32(\"    Actual\", a);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string (\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n    function assertEq32(bytes32 a, bytes32 b) internal {\r\n        assertEq(a, b);\r\n    }\r\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\r\n        assertEq(a, b, err);\r\n    }\r\n\r\n    function assertEq(int a, int b) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [int]\");\r\n            emit log_named_int(\"  Expected\", b);\r\n            emit log_named_int(\"    Actual\", a);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq(int a, int b, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n    function assertEq(uint a, uint b) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [uint]\");\r\n            emit log_named_uint(\"  Expected\", b);\r\n            emit log_named_uint(\"    Actual\", a);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq(uint a, uint b, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n    function assertEqDecimal(int a, int b, uint decimals) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"  Expected\", b, decimals);\r\n            emit log_named_decimal_int(\"    Actual\", a, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEqDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a != b) {\r\n            emit log(\"Error: a == b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"  Expected\", b, decimals);\r\n            emit log_named_decimal_uint(\"    Actual\", a, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a != b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEqDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertGt(uint a, uint b) internal {\r\n        if (a <= b) {\r\n            emit log(\"Error: a > b not satisfied [uint]\");\r\n            emit log_named_uint(\"  Value a\", a);\r\n            emit log_named_uint(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGt(uint a, uint b, string memory err) internal {\r\n        if (a <= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGt(a, b);\r\n        }\r\n    }\r\n    function assertGt(int a, int b) internal {\r\n        if (a <= b) {\r\n            emit log(\"Error: a > b not satisfied [int]\");\r\n            emit log_named_int(\"  Value a\", a);\r\n            emit log_named_int(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGt(int a, int b, string memory err) internal {\r\n        if (a <= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGt(a, b);\r\n        }\r\n    }\r\n    function assertGtDecimal(int a, int b, uint decimals) internal {\r\n        if (a <= b) {\r\n            emit log(\"Error: a > b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a <= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGtDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a <= b) {\r\n            emit log(\"Error: a > b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a <= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGtDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertGe(uint a, uint b) internal {\r\n        if (a < b) {\r\n            emit log(\"Error: a >= b not satisfied [uint]\");\r\n            emit log_named_uint(\"  Value a\", a);\r\n            emit log_named_uint(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGe(uint a, uint b, string memory err) internal {\r\n        if (a < b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGe(a, b);\r\n        }\r\n    }\r\n    function assertGe(int a, int b) internal {\r\n        if (a < b) {\r\n            emit log(\"Error: a >= b not satisfied [int]\");\r\n            emit log_named_int(\"  Value a\", a);\r\n            emit log_named_int(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGe(int a, int b, string memory err) internal {\r\n        if (a < b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGe(a, b);\r\n        }\r\n    }\r\n    function assertGeDecimal(int a, int b, uint decimals) internal {\r\n        if (a < b) {\r\n            emit log(\"Error: a >= b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a < b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGeDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a < b) {\r\n            emit log(\"Error: a >= b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a < b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGeDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertLt(uint a, uint b) internal {\r\n        if (a >= b) {\r\n            emit log(\"Error: a < b not satisfied [uint]\");\r\n            emit log_named_uint(\"  Value a\", a);\r\n            emit log_named_uint(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLt(uint a, uint b, string memory err) internal {\r\n        if (a >= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLt(a, b);\r\n        }\r\n    }\r\n    function assertLt(int a, int b) internal {\r\n        if (a >= b) {\r\n            emit log(\"Error: a < b not satisfied [int]\");\r\n            emit log_named_int(\"  Value a\", a);\r\n            emit log_named_int(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLt(int a, int b, string memory err) internal {\r\n        if (a >= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLt(a, b);\r\n        }\r\n    }\r\n    function assertLtDecimal(int a, int b, uint decimals) internal {\r\n        if (a >= b) {\r\n            emit log(\"Error: a < b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a >= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLtDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a >= b) {\r\n            emit log(\"Error: a < b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a >= b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLtDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertLe(uint a, uint b) internal {\r\n        if (a > b) {\r\n            emit log(\"Error: a <= b not satisfied [uint]\");\r\n            emit log_named_uint(\"  Value a\", a);\r\n            emit log_named_uint(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLe(uint a, uint b, string memory err) internal {\r\n        if (a > b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLe(a, b);\r\n        }\r\n    }\r\n    function assertLe(int a, int b) internal {\r\n        if (a > b) {\r\n            emit log(\"Error: a <= b not satisfied [int]\");\r\n            emit log_named_int(\"  Value a\", a);\r\n            emit log_named_int(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLe(int a, int b, string memory err) internal {\r\n        if (a > b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLe(a, b);\r\n        }\r\n    }\r\n    function assertLeDecimal(int a, int b, uint decimals) internal {\r\n        if (a > b) {\r\n            emit log(\"Error: a <= b not satisfied [decimal int]\");\r\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\r\n        if (a > b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertLeDecimal(a, b, decimals);\r\n        }\r\n    }\r\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\r\n        if (a > b) {\r\n            emit log(\"Error: a <= b not satisfied [decimal uint]\");\r\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\r\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\r\n            fail();\r\n        }\r\n    }\r\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\r\n        if (a > b) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertGeDecimal(a, b, decimals);\r\n        }\r\n    }\r\n\r\n    function assertEq(string memory a, string memory b) internal {\r\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\r\n            emit log(\"Error: a == b not satisfied [string]\");\r\n            emit log_named_string(\"  Value a\", a);\r\n            emit log_named_string(\"  Value b\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq(string memory a, string memory b, string memory err) internal {\r\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq(a, b);\r\n        }\r\n    }\r\n\r\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\r\n        ok = true;\r\n        if (a.length == b.length) {\r\n            for (uint i = 0; i < a.length; i++) {\r\n                if (a[i] != b[i]) {\r\n                    ok = false;\r\n                }\r\n            }\r\n        } else {\r\n            ok = false;\r\n        }\r\n    }\r\n    function assertEq0(bytes memory a, bytes memory b) internal {\r\n        if (!checkEq0(a, b)) {\r\n            emit log(\"Error: a == b not satisfied [bytes]\");\r\n            emit log_named_bytes(\"  Expected\", a);\r\n            emit log_named_bytes(\"    Actual\", b);\r\n            fail();\r\n        }\r\n    }\r\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\r\n        if (!checkEq0(a, b)) {\r\n            emit log_named_string(\"Error\", err);\r\n            assertEq0(a, b);\r\n        }\r\n    }\r\n}"
    },
    "contracts/test/Unipool.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8;\r\n\r\nimport {ERC20} from \"@rari-capital/solmate/src/tokens/ERC20.sol\";\r\nimport {UnipoolFactory} from \"../UnipoolFactory.sol\";\r\nimport \"../Unipool.sol\"; // where my custahs at\r\nimport \"./utils/test.sol\";\r\n\r\ncontract MockERC20 is ERC20 {    \r\n    constructor(string memory name, string memory symbol) ERC20(name, symbol, 18) {}\r\n    function mint(address guy, uint256 wad) public {\r\n        _mint(guy, wad);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function initialize(address, address, uint) external;\r\n}\r\n\r\ncontract UnipoolTest is DSTest {\r\n\r\n    UnipoolFactory factory;\r\n    MockERC20 baseToken;\r\n    MockERC20 quoteToken;\r\n    Unipool pair;\r\n\r\n    function setUp() public {\r\n        factory = new UnipoolFactory();\r\n        baseToken = new MockERC20(\"Base Token\", \"BASE\");\r\n        quoteToken = new MockERC20(\"Quote Token\", \"QUOTE\");\r\n        // Pair needs to be initialized after deployment\r\n        pair = Unipool(factory.createPair(address(baseToken), address(quoteToken)));\r\n        //mint tokens to create lp to testing 'this' contract\r\n        baseToken.mint(address(this), 1e27);\r\n        quoteToken.mint(address(this), 1e27);\r\n    }\r\n\r\n    function addLiquidity(uint baseAmount, uint quoteAmount) internal {\r\n        baseToken.transfer(address(pair), baseAmount);\r\n        quoteToken.transfer(address(pair), quoteAmount);\r\n        pair.mint(address(this));\r\n    }\r\n\r\n    function testMint() public {\r\n        uint baseAmount = 1e18;\r\n        uint quoteAmount = 4e18;\r\n        uint expectedLiquidity = 2e18;\r\n\r\n        addLiquidity(baseAmount, quoteAmount);\r\n\r\n        (uint baseReserves, uint quoteReserves,) = pair.getReserves();\r\n        require(pair.totalSupply() == expectedLiquidity, \"make sure pair supply is equal to expected liquidity\");\r\n        require(pair.balanceOf(address(this)) == expectedLiquidity - 10_000, \"make sure pair balance of this contract is equal to expected liquidity minus MIN_LIQ\");\r\n        require(baseToken.balanceOf(address(pair)) == baseAmount, \"make sure base token balance of pair is equal to base amount\");\r\n        require(quoteToken.balanceOf(address(pair)) == quoteAmount, \"make sure quote token balance of pair is equal to quote amount\");\r\n        require(baseReserves == baseAmount, \"make sure base reserves equal base amount\");\r\n        require(quoteReserves == quoteAmount, \"make sure quote reserves equal quote amount\");\r\n    }\r\n\r\n    function testSwapBaseToken() public {\r\n        uint baseAmount = 5e18;\r\n        uint quoteAmount = 10e18;\r\n        uint swapAmount = 1e18;\r\n        uint expectedOutputAmount = 1662497915624478906;\r\n\r\n        addLiquidity(baseAmount, quoteAmount);\r\n\r\n        baseToken.transfer(address(pair), swapAmount);\r\n        \r\n        pair.swap(0, expectedOutputAmount, address(this), \"\");\r\n\r\n        (uint baseReserves, uint quoteReserves,) = pair.getReserves();\r\n        require(baseReserves == baseAmount + swapAmount, \"make sure base reserves equal base amount + swap amount\");\r\n        require(quoteReserves == quoteAmount - expectedOutputAmount, \"make sure quote reserves equal quote amount - expected output\");\r\n        require(baseToken.balanceOf(address(pair)) == baseAmount + swapAmount, \"make sure base token balance of this contract equals base amount + swap amount\");\r\n        require(quoteToken.balanceOf(address(pair)) == quoteAmount - expectedOutputAmount, \"make sure quote token balance of this contract equals quote amount - expected output\");\r\n        // // expect(await token0.balanceOf(wallet.address)).to.eq(totalSupplyToken0.sub(token0Amount).sub(swapAmount))\r\n        // // expect(await token1.balanceOf(wallet.address)).to.eq(totalSupplyToken1.sub(token1Amount).add(expectedOutputAmount))\r\n    }\r\n\r\n\r\n    function testSwapQuoteToken() public {\r\n        uint baseAmount = 5e18;\r\n        uint quoteAmount = 10e18;\r\n        uint swapAmount = 1e18;\r\n        uint expectedOutputAmount = 453305446940074565;\r\n\r\n        addLiquidity(baseAmount, quoteAmount);\r\n\r\n        quoteToken.transfer(address(pair), swapAmount);\r\n\r\n        pair.swap(expectedOutputAmount, 0, address(this), \"\");\r\n\r\n        (uint baseReserves, uint quoteReserves,) = pair.getReserves();\r\n        require(baseReserves == baseAmount - expectedOutputAmount);\r\n        require(quoteReserves == quoteAmount + swapAmount);\r\n        require(baseToken.balanceOf(address(pair)) == baseAmount - expectedOutputAmount);\r\n        require(quoteToken.balanceOf(address(pair)) == quoteAmount + swapAmount);\r\n        // expect(await token0.balanceOf(wallet.address)).to.eq(totalSupplyToken0.sub(token0Amount).add(expectedOutputAmount))\r\n        // expect(await token1.balanceOf(wallet.address)).to.eq(totalSupplyToken1.sub(token1Amount).sub(swapAmount))\r\n    }\r\n\r\n    function testBurn() public {\r\n\r\n        uint baseAmount = 3e18;\r\n        uint quoteAmount = 3e18;\r\n        uint expectedLiquidity = 3e18;\r\n\r\n        addLiquidity(baseAmount, quoteAmount);\r\n\r\n        pair.transfer(address(pair), expectedLiquidity - 10_000);\r\n\r\n        pair.burn(address(this));\r\n\r\n        require(pair.balanceOf(address(this)) == 0);\r\n        require(pair.totalSupply() == 10_000);\r\n        require(baseToken.balanceOf(address(pair)) == 10_000);\r\n        require(quoteToken.balanceOf(address(pair)) == 10_000);\r\n        uint totalSupplyToken0 = baseToken.totalSupply();\r\n        uint totalSupplyToken1 = quoteToken.totalSupply();\r\n        require(baseToken.balanceOf(address(this)) == totalSupplyToken0 - 10_000);\r\n        require(quoteToken.balanceOf(address(this)) == totalSupplyToken1 - 10_000);\r\n    }\r\n}\r\n\r\n\r\n//   it('price{0,1}CumulativeLast', async () => {\r\n//     const token0Amount = expandTo18Decimals(3)\r\n//     const token1Amount = expandTo18Decimals(3)\r\n//     await addLiquidity(token0Amount, token1Amount)\r\n\r\n//     const blockTimestamp = (await pair.getReserves())[2]\r\n//     await mineBlock(provider, blockTimestamp + 1)\r\n//     await pair.sync(overrides)\r\n\r\n//     const initialPrice = encodePrice(token0Amount, token1Amount)\r\n//     expect(await pair.price0CumulativeLast()).to.eq(initialPrice[0])\r\n//     expect(await pair.price1CumulativeLast()).to.eq(initialPrice[1])\r\n//     expect((await pair.getReserves())[2]).to.eq(blockTimestamp + 1)\r\n\r\n//     const swapAmount = expandTo18Decimals(3)\r\n//     await token0.transfer(pair.address, swapAmount)\r\n//     await mineBlock(provider, blockTimestamp + 10)\r\n//     // swap to a new price eagerly instead of syncing\r\n//     await pair.swap(0, expandTo18Decimals(1), wallet.address, '0x', overrides) // make the price nice\r\n\r\n//     expect(await pair.price0CumulativeLast()).to.eq(initialPrice[0].mul(10))\r\n//     expect(await pair.price1CumulativeLast()).to.eq(initialPrice[1].mul(10))\r\n//     expect((await pair.getReserves())[2]).to.eq(blockTimestamp + 10)\r\n\r\n//     await mineBlock(provider, blockTimestamp + 20)\r\n//     await pair.sync(overrides)\r\n\r\n//     const newPrice = encodePrice(expandTo18Decimals(6), expandTo18Decimals(2))\r\n//     expect(await pair.price0CumulativeLast()).to.eq(initialPrice[0].mul(10).add(newPrice[0].mul(10)))\r\n//     expect(await pair.price1CumulativeLast()).to.eq(initialPrice[1].mul(10).add(newPrice[1].mul(10)))\r\n//     expect((await pair.getReserves())[2]).to.eq(blockTimestamp + 20)\r\n//   })\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}