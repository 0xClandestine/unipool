{
  "address": "0x0b4EE8721cc2D777291eF918Fe05e7471c9c9dc5",
  "abi": [
    {
      "inputs": [],
      "name": "IDENTICAL_ADDRESSES",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PAIR_ALREADY_EXISTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_ADDRESS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5bc09544e69fd078f81651d77907fbe22cb7ca54c68c57ce836f612319fd6512",
  "receipt": {
    "to": null,
    "from": "0x95225DCA8Bd6F4B638FF39A985A4e60F2a087696",
    "contractAddress": "0x0b4EE8721cc2D777291eF918Fe05e7471c9c9dc5",
    "transactionIndex": 8,
    "gasUsed": "2416228",
    "logsBloom": "0x
    "blockHash": "0x71c8575e18337dd60c9a262db08880c26bf7d78963617b27d39c4c0ec0539471",
    "transactionHash": "0x5bc09544e69fd078f81651d77907fbe22cb7ca54c68c57ce836f612319fd6512",
    "logs": [],
    "blockNumber": 12104853,
    "cumulativeGasUsed": "4354578",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2c27c94f834873ddb91fe9448408c4a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IDENTICAL_ADDRESSES\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PAIR_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnipoolFactory.sol\":\"UnipoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            COMMON BASE UNITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant YAD = 1e8;\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant RAD = 1e45;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function fmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(x == 0 || (x * y) / x == y)\\n            if iszero(or(iszero(x), eq(div(z, x), y))) {\\n                revert(0, 0)\\n            }\\n\\n            // If baseUnit is zero this will return zero instead of reverting.\\n            z := div(z, baseUnit)\\n        }\\n    }\\n\\n    function fdiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * baseUnit in z for now.\\n            z := mul(x, baseUnit)\\n\\n            // Equivalent to require(y != 0 && (x == 0 || (x * baseUnit) / x == baseUnit))\\n            if iszero(and(iszero(iszero(y)), or(iszero(x), eq(div(z, x), baseUnit)))) {\\n                revert(0, 0)\\n            }\\n\\n            // We ensure y is not zero above, so there is never division by zero here.\\n            z := div(z, y)\\n        }\\n    }\\n\\n    function fpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := baseUnit\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store baseUnit in z for now.\\n                    z := baseUnit\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, baseUnit)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, baseUnit)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, baseUnit)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z)\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z)\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z)\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe29b3134301cc1281f61d2b79d98262c9bb7e7d71faa52cb7f7afb192b510c07\",\"license\":\"AGPL-3.0-only\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x0920a26df9837a073c6b24c4e2542d9409c173748e0c6728a1ae39ce5c368899\"},\"contracts/Unipool.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n// \\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588      \\r\\n// \\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588   \\u2588\\u2588 \\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588      \\r\\n// \\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588      \\r\\n// \\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588      \\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588    \\u2588\\u2588 \\u2588\\u2588      \\r\\n//  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588 \\u2588\\u2588 \\u2588\\u2588       \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\r\\n\\r\\nimport {ERC20}                      from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\r\\nimport {FixedPointMathLib}          from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\r\\nimport {TransferHelper}             from \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\n\\r\\ncontract Unipool is ERC20(\\\"Unipool LP Token\\\", \\\"CLP\\\", 18), ReentrancyGuardUpgradeable {\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   EVENTS                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    event Mint(address indexed sender, uint256 baseAmount, uint256 quoteAmount);\\r\\n    event Burn(address indexed sender, uint256 baseAmount, uint256 quoteAmount, address indexed to);\\r\\n    \\r\\n    event Swap(\\r\\n        address indexed sender, \\r\\n        uint256 baseAmountIn, \\r\\n        uint256 quoteAmountIn, \\r\\n        uint256 baseAmountOut, \\r\\n        uint256 quoteAmountOut, \\r\\n        address indexed to\\r\\n    );\\r\\n     \\r\\n    event Sync(uint112 baseReserves, uint112 quoteReserves);\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                  CONSTANTS                                 */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    // To avoid division by zero, there is a minimum number of liquidity tokens that always \\r\\n    // exist (but are owned by account zero). That number is BIPS_DIVISOR, ten thousand.\\r\\n    uint256 internal constant PRECISION = 112;\\r\\n    uint256 internal constant BIPS_DIVISOR = 10_000;\\r\\n    \\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                MUTABLE STATE                               */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    address public factory;\\r\\n    address public base;\\r\\n    address public quote;\\r\\n\\r\\n    uint256 public swapFee;\\r\\n    uint256 public basePriceCumulativeLast;\\r\\n    uint256 public quotePriceCumulativeLast;\\r\\n    \\r\\n    uint112 private baseReserves;   \\r\\n    uint112 private quoteReserves;\\r\\n    uint32  private lastUpdate;\\r\\n\\r\\n    function getReserves() public view returns (uint112 _baseReserves, uint112 _quoteReserves, uint32 _lastUpdate) {\\r\\n        (_baseReserves, _quoteReserves, _lastUpdate) = (baseReserves, quoteReserves, lastUpdate);\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                               INITIALIZATION                               */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    error INITIALIZED();\\r\\n\\r\\n    // called once by the factory at time of deployment\\r\\n    function initialize(\\r\\n        address _base, \\r\\n        address _quote, \\r\\n        uint256 _swapFee\\r\\n    ) external initializer {\\r\\n        if (swapFee > 0) revert INITIALIZED();\\r\\n        (base, quote, swapFee) = (_base, _quote, _swapFee);\\r\\n        _mint(address(0), BIPS_DIVISOR); \\r\\n\\r\\n        __ReentrancyGuard_init();\\r\\n    }\\r\\n\\r\\n    error BALANCE_OVERFLOW();\\r\\n\\r\\n    /// @notice update reserves and, on the first call per block, price accumulators\\r\\n    function _update(\\r\\n        uint256 baseBalance, \\r\\n        uint256 quoteBalance, \\r\\n        uint112 _baseReserves, \\r\\n        uint112 _quoteReserves\\r\\n    ) private {\\r\\n        unchecked {\\r\\n            // 1) revert if both balances are greater than 2**112\\r\\n            if (baseBalance > type(uint112).max || quoteBalance > type(uint112).max) revert BALANCE_OVERFLOW();\\r\\n            // 2) store current time in memory (mod 2**32 to prevent DoS in 20 years)\\r\\n            uint32 timestampAdjusted = uint32(block.timestamp % 2**32);\\r\\n            // 3) store elapsed time since last update\\r\\n            uint256 timeElapsed = timestampAdjusted - lastUpdate; \\r\\n            // 4) if oracle info hasn\\\"t been updated this block, and there's liquidity, update TWAP variables\\r\\n            if (timeElapsed > 0 && _baseReserves != 0 && _quoteReserves != 0) {\\r\\n                basePriceCumulativeLast += (uint(_quoteReserves) << PRECISION) / _baseReserves * timeElapsed;\\r\\n                quotePriceCumulativeLast += (uint(_baseReserves) << PRECISION) / _quoteReserves * timeElapsed;\\r\\n            }\\r\\n            // 5) sync reserves (make them match balances)\\r\\n            (baseReserves, quoteReserves, lastUpdate) = (uint112(baseBalance), uint112(quoteBalance), timestampAdjusted);\\r\\n            // 6) emit event since mutable storage was updated\\r\\n            emit Sync(baseReserves, quoteReserves);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    error INSUFFICIENT_LIQUIDITY_MINTED();\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function mint(address to) external nonReentrant returns (uint256 liquidity) {\\r\\n        // 1) store any variables used more than once in memory to avoid SLOAD\\\"s\\r\\n        (uint112 _baseReserves, uint112 _quoteReserves,) = getReserves();\\r\\n        uint256 baseBalance = ERC20(base).balanceOf(address(this));\\r\\n        uint256 quoteBalance = ERC20(quote).balanceOf(address(this));\\r\\n        uint256 baseAmount = baseBalance - (_baseReserves);\\r\\n        uint256 quoteAmount = quoteBalance - (_quoteReserves);\\r\\n        uint256 _totalSupply = totalSupply;\\r\\n        // 2) if lp token total supply is equal to BIPS_DIVISOR (1,000 wei), \\r\\n        // amountOut (liquidity) is equal to the root of k minus BIPS_DIVISOR  \\r\\n        if (_totalSupply == BIPS_DIVISOR) liquidity = FixedPointMathLib.sqrt(baseAmount * quoteAmount) - BIPS_DIVISOR; \\r\\n        else liquidity = min(uDiv(baseAmount * _totalSupply, _baseReserves), uDiv(quoteAmount * _totalSupply, _quoteReserves));\\r\\n        // 3) revert if Lp tokens out is equal to zero\\r\\n        if (liquidity == 0) revert INSUFFICIENT_LIQUIDITY_MINTED();\\r\\n        // 4) mint liquidity providers LP tokens        \\r\\n        _mint(to, liquidity);\\r\\n        // 5) update mutable storage (reserves + cumulative oracle prices)\\r\\n        _update(baseBalance, quoteBalance, _baseReserves, _quoteReserves);\\r\\n        // 6) emit event since mutable storage was updated  \\r\\n        emit Mint(msg.sender, baseAmount, quoteAmount);\\r\\n    }\\r\\n\\r\\n    error INSUFFICIENT_LIQUIDITY_BURNED();\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function burn(address to) external nonReentrant returns (uint256 baseAmount, uint256 quoteAmount) {\\r\\n        // 1) store any variables used more than once in memory to avoid SLOAD\\\"s\\r\\n        (uint112 _baseReserves, uint112 _quoteReserves,) = getReserves();   \\r\\n        address _base = base;                                    \\r\\n        address _quote = quote;                                    \\r\\n        uint256 baseBalance = ERC20(_base).balanceOf(address(this));          \\r\\n        uint256 quoteBalance = ERC20(_quote).balanceOf(address(this));          \\r\\n        uint256 liquidity = balanceOf[address(this)];                 \\r\\n        uint256 _totalSupply = totalSupply;\\r\\n        // 2) division was originally unchecked, using balances ensures pro-rata distribution\\r\\n        baseAmount = uDiv(liquidity * baseBalance, _totalSupply); \\r\\n        quoteAmount = uDiv(liquidity * quoteBalance, _totalSupply);\\r\\n        // 3) revert if amountOuts are both equal to zero\\r\\n        if (baseAmount == 0 && quoteAmount == 0) revert INSUFFICIENT_LIQUIDITY_BURNED();\\r\\n        // 4) burn LP tokens from this contract\\\"s balance\\r\\n        _burn(address(this), liquidity);\\r\\n        // 5) return liquidity providers underlying tokens        \\r\\n        TransferHelper.safeTransfer(_base, to, baseAmount);\\r\\n        TransferHelper.safeTransfer(_quote, to, quoteAmount);\\r\\n        // 6) update mutable storage (reserves + cumulative oracle prices)        \\r\\n        _update(ERC20(_base).balanceOf(address(this)), ERC20(_quote).balanceOf(address(this)), _baseReserves, _quoteReserves);\\r\\n        // 7) emit event since mutable storage was updated     \\r\\n        emit Burn(msg.sender, baseAmount, quoteAmount, to);\\r\\n    }\\r\\n\\r\\n    error INSUFFICIENT_OUTPUT_AMOUNT();\\r\\n    error INSUFFICIENT_LIQUIDITY();\\r\\n    error INSUFFICIENT_INPUT_AMOUNT();\\r\\n    error INSUFFICIENT_INVARIANT();\\r\\n\\r\\n    /// @notice Optimistically swap tokens, will revert if K is not satisfied\\r\\n    /// @param baseAmountOut - amount of base tokens user wants to receive\\r\\n    /// @param quoteAmountOut - amount of quote tokens user wants to receive\\r\\n    /// @param to - recipient of 'output' tokens\\r\\n    /// @param data - arbitrary data used during flashswaps\\r\\n    function swap(\\r\\n        uint256 baseAmountOut, \\r\\n        uint256 quoteAmountOut, \\r\\n        address to, \\r\\n        bytes calldata data\\r\\n    ) external nonReentrant {\\r\\n        // 1) revert if both amounts out are zero\\r\\n        // 2) store reserves in memory to avoid SLOAD\\\"s\\r\\n        // 3) revert if both amounts out\\r\\n        // 4) store any other variables used more than once in memory to avoid SLOAD\\\"s\\r\\n        if (baseAmountOut + quoteAmountOut == 0) revert INSUFFICIENT_OUTPUT_AMOUNT();\\r\\n        (uint112 _baseReserves, uint112 _quoteReserves,) = getReserves();\\r\\n        if (baseAmountOut > _baseReserves || quoteAmountOut >=_quoteReserves) revert INSUFFICIENT_LIQUIDITY();\\r\\n        uint256 baseAmountIn;\\r\\n        uint256 quoteAmountIn;\\r\\n        uint256 baseBalance;\\r\\n        uint256 quoteBalance;\\r\\n        {\\r\\n        address _base = base;\\r\\n        address _quote = quote;\\r\\n        // 1) optimistically transfer \\\"to\\\" base tokens\\r\\n        // 2) optimistically transfer \\\"to\\\" quote tokens\\r\\n        // 3) if data length is greater than 0, initiate flashswap\\r\\n        // 4) store base token balance of contract in memory\\r\\n        // 5) store quote token balance of contract in memory\\r\\n        if (baseAmountOut > 0) TransferHelper.safeTransfer(_base, to, baseAmountOut); \\r\\n        if (quoteAmountOut > 0) TransferHelper.safeTransfer(_quote, to, quoteAmountOut);\\r\\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, baseAmountOut, quoteAmountOut, data);\\r\\n        baseBalance = ERC20(_base).balanceOf(address(this));\\r\\n        quoteBalance = ERC20(_quote).balanceOf(address(this));\\r\\n        } \\r\\n        \\r\\n        unchecked {\\r\\n            // 1) calculate baseAmountIn by comparing contracts balance to last known reserve\\r\\n            // 2) calculate quoteAmountIn by comparing contracts balance to last known reserve\\r\\n            // 3) revert if user hasn't sent any tokens to the contract \\r\\n            if (baseBalance > _baseReserves - baseAmountOut) baseAmountIn = baseBalance - (_baseReserves - baseAmountOut);\\r\\n            if (quoteBalance > _quoteReserves - quoteAmountOut) quoteAmountIn = quoteBalance - (_quoteReserves - quoteAmountOut);\\r\\n            if (baseAmountIn + quoteAmountIn == 0) revert INSUFFICIENT_INPUT_AMOUNT();\\r\\n        }\\r\\n\\r\\n        {\\r\\n        // 1) store swap fee in memory to save SLOAD\\r\\n        // 2) revert if current k adjusted for fees is less than old k\\r\\n        // 3) update mutable storage (reserves + cumulative oracle prices)\\r\\n        // 4) emit event since mutable storage was updated\\r\\n        uint256 _swapFee = swapFee; \\r\\n        uint256 baseBalanceAdjusted = baseBalance * BIPS_DIVISOR - baseAmountIn * _swapFee;\\r\\n        uint256 quoteBalanceAdjusted = quoteBalance * BIPS_DIVISOR - quoteAmountIn * _swapFee;\\r\\n        if (baseBalanceAdjusted * quoteBalanceAdjusted < uint(_baseReserves) * _quoteReserves * 1e8) revert INSUFFICIENT_INVARIANT();\\r\\n        }\\r\\n        _update(baseBalance, quoteBalance, _baseReserves, _quoteReserves);\\r\\n        emit Swap(msg.sender, baseAmountIn, quoteAmountIn, baseAmountOut, quoteAmountOut, to);\\r\\n    }\\r\\n\\r\\n    // force balances to match reserves\\r\\n    function skim(address to) external nonReentrant {\\r\\n        // store any variables used more than once in memory to avoid SLOAD\\\"s\\r\\n        address _base = base;\\r\\n        address _quote = quote;\\r\\n        // transfer unaccounted reserves -> \\\"to\\\"\\r\\n        TransferHelper.safeTransfer(_base, to, ERC20(_base).balanceOf(address(this)) - baseReserves);\\r\\n        TransferHelper.safeTransfer(_quote, to, ERC20(_quote).balanceOf(address(this)) - quoteReserves);\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() external nonReentrant {\\r\\n        _update(\\r\\n            ERC20(base).balanceOf(address(this)), \\r\\n            ERC20(quote).balanceOf(address(this)), \\r\\n            baseReserves, \\r\\n            quoteReserves\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                              INTERNAL HELPERS                              */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    // unchecked division\\r\\n    function uDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {assembly {z := div(x, y)}}\\r\\n\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {z = x < y ? x : y;}\\r\\n}\\r\\n\\r\\n// naming left for old contract support\\r\\ninterface IUniswapV2Callee {\\r\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0507b4389fd52fe57109af04d1cfcd51c09286c5336681d539773ea0791ef276\",\"license\":\"GPLv3\"},\"contracts/UnipoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"./Unipool.sol\\\";\\r\\n\\r\\ncontract UnipoolFactory {\\r\\n\\r\\n    mapping(address => mapping(address => address)) private _getPair;\\r\\n    address[] public allPairs;\\r\\n\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    address public implementation = address(new Unipool());\\r\\n\\r\\n    error IDENTICAL_ADDRESSES();\\r\\n    error PAIR_ALREADY_EXISTS();\\r\\n    error ZERO_ADDRESS();\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\r\\n        if (tokenA == tokenB) revert IDENTICAL_ADDRESSES();\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        if (token0 == address(0)) revert ZERO_ADDRESS();\\r\\n        if (_getPair[token0][token1] != address(0)) revert PAIR_ALREADY_EXISTS(); // single check is sufficient\\r\\n\\r\\n        pair = cloneDeterministic(implementation, keccak256(abi.encodePacked(token0, token1)));\\r\\n        Unipool(pair).initialize(token0, token1, 25);\\r\\n        \\r\\n        _getPair[token0][token1] = pair;\\r\\n        allPairs.push(pair);\\r\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\r\\n    }\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address) {\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        return _getPair[token0][token1];\\r\\n    }\\r\\n    \\r\\n    function allPairsLength() external view returns (uint) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                CLONE LOGIC                                 */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    function cloneDeterministic(address impl, bytes32 salt) internal returns (address instance) {\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n            mstore(add(ptr, 0x14), shl(0x60, impl))\\r\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n            instance := create2(0, ptr, 0x37, salt)\\r\\n        }\\r\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf88bda74dfb42638e1f51ea90fd9ef4a66cde098f58c595490a0e7814f495a0b\",\"license\":\"GPLv3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80635c60da1b116100505780635c60da1b146100ad578063c9c65396146100c0578063e6a43905146100d357600080fd5b80631e3dd18b1461006c578063574f2ba31461009c575b600080fd5b61007f61007a366004610514565b6100e6565b6040516001600160a01b0390911681526020015b60405180910390f35b600154604051908152602001610093565b60025461007f906001600160a01b031681565b61007f6100ce366004610549565b610110565b61007f6100e1366004610549565b6103e7565b600181815481106100f657600080fd5b6000918252602090912001546001600160a01b0316905081565b6000816001600160a01b0316836001600160a01b0316141561015e576040517f82dfd2a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080836001600160a01b0316856001600160a01b031610610181578385610184565b84845b90925090506001600160a01b0382166101c9576040517f538ba4f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382811660009081526020818152604080832085851684529091529020541615610226576040517f05ef58b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b8216602084015284901b16603482015261028e916001600160a01b0316906048016040516020818303038152906040528051906020012061043f565b6040517f1794bb3c0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015283811660248301526019604483015291945090841690631794bb3c90606401600060405180830381600087803b1580156102fd57600080fd5b505af1158015610311573d6000803e3d6000fd5b505050506001600160a01b0382811660008181526020818152604080832086861680855290835281842080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116978b16978817909155600180548082018255958190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909501805490911687179055925481519586529185019190915290927f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a3505092915050565b6000806000836001600160a01b0316856001600160a01b03161061040c57838561040f565b84845b6001600160a01b039182166000908152602081815260408083209385168352929052205416925050505b92915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b038116610439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640160405180910390fd5b60006020828403121561052657600080fd5b5035919050565b80356001600160a01b038116811461054457600080fd5b919050565b6000806040838503121561055c57600080fd5b6105658361052d565b91506105736020840161052d565b9050925092905056fea264697066735822122061a3aaac9e47fb5cca85339f6d69589901aab952b3e22f90accac162853529c664736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2533,
        "contract": "contracts/UnipoolFactory.sol:UnipoolFactory",
        "label": "_getPair",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 2536,
        "contract": "contracts/UnipoolFactory.sol:UnipoolFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2555,
        "contract": "contracts/UnipoolFactory.sol:UnipoolFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}